package service

import exceptions.DbException
import model.SpaceMarine
import model.SpaceMarineList
import xml.Marshallers
import xml.Unmarshallers
import java.io.StringWriter
import java.sql.Connection
import java.sql.DriverManager
import java.sql.SQLException


class DatabaseService() {
  private val connectionString = "jdbc:postgresql://localhost:5432/orfac"
  private val user = "orfac"
  private val password = "orfac"
  private val contextTableName = "MARINES"
  private val contextTableCreateQuery = "CREATE TABLE IF NOT EXISTS $contextTableName (Info      TEXT, ID  SERIAL PRIMARY KEY)"
  private val contextRetrieveQuery = "SELECT INFO FROM $contextTableName;"
  private val contextInsertQuery = "INSERT INTO CONTEXT VALUES('');"

  init {
    val connection = getConnection()
    val statement = connection.createStatement()
    statement.execute(contextTableCreateQuery)
    statement.close()
    connection.close()
  }

  fun getConnection(): Connection {
    Class.forName("org.postgresql.Driver").getDeclaredConstructor().newInstance();
    return try {
      DriverManager.getConnection(connectionString, user, password)
    } catch (e: SQLException) {
      throw DbException("Connection Failed")
    }
  }

  @Synchronized
  fun updateContext(data : SpaceMarineList) {
    val writer = StringWriter()
    Marshallers.MARINE_LIST.marshal(data, writer)
    val contextUpdateQuery = "UPDATE $contextTableName SET INFO = $writer where id=1"
    val connection = getConnection()
    val statement = connection.createStatement()
    statement.execute(contextUpdateQuery)

    statement.close()
    connection.close()
  }

  @Synchronized
  fun retrieveContext() : SpaceMarineList{
    val connection = getConnection()
    val statement = connection.createStatement()
    statement.execute(contextRetrieveQuery)
    val resultSet = statement.resultSet
    resultSet.next()
    val infoValue = resultSet.getString("info")
    statement.close()
    connection.close()
    if (infoValue.isBlank())
      return SpaceMarineList()

    return Unmarshallers.MARINE_LIST.unmarshal(infoValue.reader()) as SpaceMarineList

  }

}